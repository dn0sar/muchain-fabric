/*
Copyright IBM Corp. 2016 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

		 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package protos;

import "blockchainmessages.proto";
import "fabric.proto";

// Interface exported by the server.
service Devops {
    // Log in - passed Secret object and returns Response object, where
    // msg is the security context to be used in subsequent invocations
    rpc Login(Secret) returns (Response) {}

    // Build the chaincode package.
    // Response vs. ChaincodeDeploymentSpec see the comments at for Deploy
    rpc Build(ChaincodeSpec) returns (Response) {}

    // Deploy the chaincode package to the chain.
    // Before the call was returning a ChaincodeDeploymentSpec
    // Now it is inglobated into the response message to uniform the call
    rpc Deploy(ChaincodeSpec) returns (Response) {}

    // Invoke chaincode.
    rpc Invoke(ChaincodeInvocationSpec) returns (Response) {}

    // Query chaincode.
    rpc Query(ChaincodeInvocationSpec) returns (Response) {}

    // IssueTxSet deploys a transactions set or an extension of it in case the set that it refers to was already defined
    // The response returned contains another response chained into it.
    // The outmost response is related to the TxSet and contains the TxID assigned to the set
    // The inner response contains the result of the execution of the dafault transaction of the issued set.
    rpc IssueTxSet(TxSetSpec) returns (Response) {}

    // TODO: Add method to allow the extension of a TxSet

    // Modifies the active transaction of a transactions set.
    // Contains two responses. The inner one contains the response for the execution of the new default transaction.
    // The outer one contains a positive response if the history change did not cause conflicts in the chain.
    rpc Mutate(MutantSpec) returns (Response) {}

    // Queries the state of a given Tx Set
    rpc QueryTxSetState(MutantSpec) returns (Response) {}

    // Retrieve a TCert.
    rpc EXP_GetApplicationTCert(Secret) returns (Response) {}

    // Prepare for performing a TX, which will return a binding that can later be used to sign and then execute a transaction.
    rpc EXP_PrepareForTx(Secret) returns (Response) {}

    // Prepare for performing a TX, which will return a binding that can later be used to sign and then execute a transaction.
    rpc EXP_ProduceSigma(SigmaInput) returns (Response) {}

    // Execute a transaction with a specific binding
    rpc EXP_ExecuteWithBinding(ExecuteWithBinding) returns (Response) {}

}


// Secret is a temporary object to establish security with the Devops.
// A better solution using certificate will be introduced later
message Secret {
    string enrollId = 1;
    string enrollSecret = 2;
}

message SigmaInput {
    Secret secret = 1;
    bytes appTCert = 2;
    bytes data = 3;
}

message ExecuteWithBinding {
    ChaincodeInvocationSpec chaincodeInvocationSpec = 1;
    bytes binding = 2;    
}

message SigmaOutput {
    bytes tcert = 1;
    bytes sigma = 2;
    bytes asn1Encoding = 3;
}


message BuildResult {

    enum StatusCode {
        UNDEFINED = 0;
        SUCCESS = 1;
        FAILURE = 2;
    }

    StatusCode status = 1;
    string msg = 2;
    ChaincodeDeploymentSpec deploymentSpec = 3;
}

message TransactionRequest {
    string transactionUuid = 1;
}
