// Code generated by protoc-gen-go.
// source: fabric.proto
// DO NOT EDIT!

package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type PeerEndpoint_Type int32

const (
	PeerEndpoint_UNDEFINED     PeerEndpoint_Type = 0
	PeerEndpoint_VALIDATOR     PeerEndpoint_Type = 1
	PeerEndpoint_NON_VALIDATOR PeerEndpoint_Type = 2
)

var PeerEndpoint_Type_name = map[int32]string{
	0: "UNDEFINED",
	1: "VALIDATOR",
	2: "NON_VALIDATOR",
}
var PeerEndpoint_Type_value = map[string]int32{
	"UNDEFINED":     0,
	"VALIDATOR":     1,
	"NON_VALIDATOR": 2,
}

func (x PeerEndpoint_Type) String() string {
	return proto.EnumName(PeerEndpoint_Type_name, int32(x))
}
func (PeerEndpoint_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{12, 0} }

type Message_Type int32

const (
	Message_UNDEFINED       Message_Type = 0
	Message_DISC_HELLO      Message_Type = 1
	Message_DISC_DISCONNECT Message_Type = 2
	Message_DISC_GET_PEERS  Message_Type = 3
	Message_DISC_PEERS      Message_Type = 4
	Message_DISC_NEWMSG     Message_Type = 5
	// CHAIN_TRANSACTION is now used to send an InBlockTransaction
	Message_CHAIN_TRANSACTION       Message_Type = 6
	Message_SYNC_GET_BLOCKS         Message_Type = 11
	Message_SYNC_BLOCKS             Message_Type = 12
	Message_SYNC_BLOCK_ADDED        Message_Type = 13
	Message_SYNC_STATE_GET_SNAPSHOT Message_Type = 14
	Message_SYNC_STATE_SNAPSHOT     Message_Type = 15
	Message_SYNC_STATE_GET_DELTAS   Message_Type = 16
	Message_SYNC_STATE_DELTAS       Message_Type = 17
	Message_RESPONSE                Message_Type = 20
	Message_CONSENSUS               Message_Type = 21
)

var Message_Type_name = map[int32]string{
	0:  "UNDEFINED",
	1:  "DISC_HELLO",
	2:  "DISC_DISCONNECT",
	3:  "DISC_GET_PEERS",
	4:  "DISC_PEERS",
	5:  "DISC_NEWMSG",
	6:  "CHAIN_TRANSACTION",
	11: "SYNC_GET_BLOCKS",
	12: "SYNC_BLOCKS",
	13: "SYNC_BLOCK_ADDED",
	14: "SYNC_STATE_GET_SNAPSHOT",
	15: "SYNC_STATE_SNAPSHOT",
	16: "SYNC_STATE_GET_DELTAS",
	17: "SYNC_STATE_DELTAS",
	20: "RESPONSE",
	21: "CONSENSUS",
}
var Message_Type_value = map[string]int32{
	"UNDEFINED":               0,
	"DISC_HELLO":              1,
	"DISC_DISCONNECT":         2,
	"DISC_GET_PEERS":          3,
	"DISC_PEERS":              4,
	"DISC_NEWMSG":             5,
	"CHAIN_TRANSACTION":       6,
	"SYNC_GET_BLOCKS":         11,
	"SYNC_BLOCKS":             12,
	"SYNC_BLOCK_ADDED":        13,
	"SYNC_STATE_GET_SNAPSHOT": 14,
	"SYNC_STATE_SNAPSHOT":     15,
	"SYNC_STATE_GET_DELTAS":   16,
	"SYNC_STATE_DELTAS":       17,
	"RESPONSE":                20,
	"CONSENSUS":               21,
}

func (x Message_Type) String() string {
	return proto.EnumName(Message_Type_name, int32(x))
}
func (Message_Type) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{16, 0} }

type Response_StatusCode int32

const (
	Response_UNDEFINED Response_StatusCode = 0
	Response_SUCCESS   Response_StatusCode = 200
	Response_FAILURE   Response_StatusCode = 500
)

var Response_StatusCode_name = map[int32]string{
	0:   "UNDEFINED",
	200: "SUCCESS",
	500: "FAILURE",
}
var Response_StatusCode_value = map[string]int32{
	"UNDEFINED": 0,
	"SUCCESS":   200,
	"FAILURE":   500,
}

func (x Response_StatusCode) String() string {
	return proto.EnumName(Response_StatusCode_name, int32(x))
}
func (Response_StatusCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{17, 0} }

// Transaction defines a function call to a contract.
// `args` is an array of type string so that the chaincode writer can choose
// whatever format they wish for the arguments for their chaincode.
// For example, they may wish to use JSON, XML, or a custom format.
// TODO: Defined remaining fields.
type Transaction struct {
	Type ChaincodeAction `protobuf:"varint,1,opt,name=type,enum=protos.ChaincodeAction" json:"type,omitempty"`
	// store ChaincodeID as bytes so its encrypted value can be stored
	ChaincodeID                    []byte                     `protobuf:"bytes,2,opt,name=chaincodeID,proto3" json:"chaincodeID,omitempty"`
	Payload                        []byte                     `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Metadata                       []byte                     `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Txid                           string                     `protobuf:"bytes,5,opt,name=txid" json:"txid,omitempty"`
	Timestamp                      *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=timestamp" json:"timestamp,omitempty"`
	ConfidentialityLevel           ConfidentialityLevel       `protobuf:"varint,7,opt,name=confidentialityLevel,enum=protos.ConfidentialityLevel" json:"confidentialityLevel,omitempty"`
	ConfidentialityProtocolVersion string                     `protobuf:"bytes,8,opt,name=confidentialityProtocolVersion" json:"confidentialityProtocolVersion,omitempty"`
	Nonce                          []byte                     `protobuf:"bytes,9,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ToValidators                   []byte                     `protobuf:"bytes,10,opt,name=toValidators,proto3" json:"toValidators,omitempty"`
	Cert                           []byte                     `protobuf:"bytes,11,opt,name=cert,proto3" json:"cert,omitempty"`
	Signature                      []byte                     `protobuf:"bytes,12,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *Transaction) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type MutantTransaction struct {
	// txSetID: the transaction set ID of the transaction set that this mutant transaction is modifying
	TxSetID string `protobuf:"bytes,1,opt,name=txSetID" json:"txSetID,omitempty"`
	// The index of the new active transaction for this tx set
	TxSetIndex uint64 `protobuf:"varint,2,opt,name=txSetIndex" json:"txSetIndex,omitempty"`
}

func (m *MutantTransaction) Reset()                    { *m = MutantTransaction{} }
func (m *MutantTransaction) String() string            { return proto.CompactTextString(m) }
func (*MutantTransaction) ProtoMessage()               {}
func (*MutantTransaction) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{1} }

type TransactionSet struct {
	// transactions: the transactions in this set
	// the bytes represent information to reconstruct to a Transaction type
	Transactions [][]byte `protobuf:"bytes,1,rep,name=transactions,proto3" json:"transactions,omitempty"`
	// defaultInx: the index of the default transaction in this set
	DefaultInx uint64 `protobuf:"varint,2,opt,name=defaultInx" json:"defaultInx,omitempty"`
	// if extend is true the current transaction set is an extension of an existing one
	Extend bool `protobuf:"varint,3,opt,name=extend" json:"extend,omitempty"`
}

func (m *TransactionSet) Reset()                    { *m = TransactionSet{} }
func (m *TransactionSet) String() string            { return proto.CompactTextString(m) }
func (*TransactionSet) ProtoMessage()               {}
func (*TransactionSet) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{2} }

type TxSetStateQuery struct {
	TxSetID   string                     `protobuf:"bytes,1,opt,name=TxSetID,json=txSetID" json:"TxSetID,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
}

func (m *TxSetStateQuery) Reset()                    { *m = TxSetStateQuery{} }
func (m *TxSetStateQuery) String() string            { return proto.CompactTextString(m) }
func (*TxSetStateQuery) ProtoMessage()               {}
func (*TxSetStateQuery) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{3} }

func (m *TxSetStateQuery) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type InBlockTransaction struct {
	// Types that are valid to be assigned to Transaction:
	//	*InBlockTransaction_TransactionSet
	//	*InBlockTransaction_MutantTransaction
	//	*InBlockTransaction_SetStQueryTransaction
	Transaction                    isInBlockTransaction_Transaction `protobuf_oneof:"transaction"`
	Metadata                       []byte                           `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`
	Txid                           string                           `protobuf:"bytes,5,opt,name=txid" json:"txid,omitempty"`
	Timestamp                      *google_protobuf.Timestamp       `protobuf:"bytes,6,opt,name=timestamp" json:"timestamp,omitempty"`
	ConfidentialityLevel           ConfidentialityLevel             `protobuf:"varint,7,opt,name=confidentialityLevel,enum=protos.ConfidentialityLevel" json:"confidentialityLevel,omitempty"`
	ConfidentialityProtocolVersion string                           `protobuf:"bytes,8,opt,name=confidentialityProtocolVersion" json:"confidentialityProtocolVersion,omitempty"`
	Nonce                          []byte                           `protobuf:"bytes,9,opt,name=nonce,proto3" json:"nonce,omitempty"`
	ToValidators                   []byte                           `protobuf:"bytes,10,opt,name=toValidators,proto3" json:"toValidators,omitempty"`
	Cert                           []byte                           `protobuf:"bytes,11,opt,name=cert,proto3" json:"cert,omitempty"`
	Signature                      []byte                           `protobuf:"bytes,12,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *InBlockTransaction) Reset()                    { *m = InBlockTransaction{} }
func (m *InBlockTransaction) String() string            { return proto.CompactTextString(m) }
func (*InBlockTransaction) ProtoMessage()               {}
func (*InBlockTransaction) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{4} }

type isInBlockTransaction_Transaction interface {
	isInBlockTransaction_Transaction()
}

type InBlockTransaction_TransactionSet struct {
	TransactionSet *TransactionSet `protobuf:"bytes,1,opt,name=transactionSet,oneof"`
}
type InBlockTransaction_MutantTransaction struct {
	MutantTransaction *MutantTransaction `protobuf:"bytes,2,opt,name=mutantTransaction,oneof"`
}
type InBlockTransaction_SetStQueryTransaction struct {
	SetStQueryTransaction *TxSetStateQuery `protobuf:"bytes,3,opt,name=setStQueryTransaction,oneof"`
}

func (*InBlockTransaction_TransactionSet) isInBlockTransaction_Transaction()        {}
func (*InBlockTransaction_MutantTransaction) isInBlockTransaction_Transaction()     {}
func (*InBlockTransaction_SetStQueryTransaction) isInBlockTransaction_Transaction() {}

func (m *InBlockTransaction) GetTransaction() isInBlockTransaction_Transaction {
	if m != nil {
		return m.Transaction
	}
	return nil
}

func (m *InBlockTransaction) GetTransactionSet() *TransactionSet {
	if x, ok := m.GetTransaction().(*InBlockTransaction_TransactionSet); ok {
		return x.TransactionSet
	}
	return nil
}

func (m *InBlockTransaction) GetMutantTransaction() *MutantTransaction {
	if x, ok := m.GetTransaction().(*InBlockTransaction_MutantTransaction); ok {
		return x.MutantTransaction
	}
	return nil
}

func (m *InBlockTransaction) GetSetStQueryTransaction() *TxSetStateQuery {
	if x, ok := m.GetTransaction().(*InBlockTransaction_SetStQueryTransaction); ok {
		return x.SetStQueryTransaction
	}
	return nil
}

func (m *InBlockTransaction) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*InBlockTransaction) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _InBlockTransaction_OneofMarshaler, _InBlockTransaction_OneofUnmarshaler, _InBlockTransaction_OneofSizer, []interface{}{
		(*InBlockTransaction_TransactionSet)(nil),
		(*InBlockTransaction_MutantTransaction)(nil),
		(*InBlockTransaction_SetStQueryTransaction)(nil),
	}
}

func _InBlockTransaction_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*InBlockTransaction)
	// transaction
	switch x := m.Transaction.(type) {
	case *InBlockTransaction_TransactionSet:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.TransactionSet); err != nil {
			return err
		}
	case *InBlockTransaction_MutantTransaction:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MutantTransaction); err != nil {
			return err
		}
	case *InBlockTransaction_SetStQueryTransaction:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SetStQueryTransaction); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("InBlockTransaction.Transaction has unexpected type %T", x)
	}
	return nil
}

func _InBlockTransaction_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*InBlockTransaction)
	switch tag {
	case 1: // transaction.transactionSet
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TransactionSet)
		err := b.DecodeMessage(msg)
		m.Transaction = &InBlockTransaction_TransactionSet{msg}
		return true, err
	case 2: // transaction.mutantTransaction
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(MutantTransaction)
		err := b.DecodeMessage(msg)
		m.Transaction = &InBlockTransaction_MutantTransaction{msg}
		return true, err
	case 3: // transaction.setStQueryTransaction
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(TxSetStateQuery)
		err := b.DecodeMessage(msg)
		m.Transaction = &InBlockTransaction_SetStQueryTransaction{msg}
		return true, err
	default:
		return false, nil
	}
}

func _InBlockTransaction_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*InBlockTransaction)
	// transaction
	switch x := m.Transaction.(type) {
	case *InBlockTransaction_TransactionSet:
		s := proto.Size(x.TransactionSet)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InBlockTransaction_MutantTransaction:
		s := proto.Size(x.MutantTransaction)
		n += proto.SizeVarint(2<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *InBlockTransaction_SetStQueryTransaction:
		s := proto.Size(x.SetStQueryTransaction)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// TransactionBlock carries a batch of transactions.
type TransactionBlock struct {
	Transactions []*InBlockTransaction `protobuf:"bytes,1,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *TransactionBlock) Reset()                    { *m = TransactionBlock{} }
func (m *TransactionBlock) String() string            { return proto.CompactTextString(m) }
func (*TransactionBlock) ProtoMessage()               {}
func (*TransactionBlock) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{5} }

func (m *TransactionBlock) GetTransactions() []*InBlockTransaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

// TransactionResult contains the return value of a transaction. It does
// not track potential state changes that were a result of the transaction.
// txid - The unique identifier of this transaction.
// result - The return value of the transaction.
// errorCode - An error code. 5xx will be logged as a failure in the dashboard.
// error - An error string for logging an issue.
// chaincodeEvent - any event emitted by a transaction
type TransactionResult struct {
	Txid           string          `protobuf:"bytes,1,opt,name=txid" json:"txid,omitempty"`
	Result         []byte          `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	ErrorCode      uint32          `protobuf:"varint,3,opt,name=errorCode" json:"errorCode,omitempty"`
	Error          string          `protobuf:"bytes,4,opt,name=error" json:"error,omitempty"`
	ChaincodeEvent *ChaincodeEvent `protobuf:"bytes,5,opt,name=chaincodeEvent" json:"chaincodeEvent,omitempty"`
}

func (m *TransactionResult) Reset()                    { *m = TransactionResult{} }
func (m *TransactionResult) String() string            { return proto.CompactTextString(m) }
func (*TransactionResult) ProtoMessage()               {}
func (*TransactionResult) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{6} }

func (m *TransactionResult) GetChaincodeEvent() *ChaincodeEvent {
	if m != nil {
		return m.ChaincodeEvent
	}
	return nil
}

// Block carries The data that describes a block in the blockchain.
// version - Version used to track any protocol changes.
// timestamp - The time at which the block or transaction order
// was proposed. This may not be used by all consensus modules.
// transactions - The ordered list of transactions in the block. //TODO: This must somehow be converted to a merkle tree
// stateHash - The state hash after running transactions in this block.
// previousBlockHash - The hash of the previous block in the chain.
// consensusMetadata - Consensus modules may optionally store any
// additional metadata in this field.
// nonHashData - Data stored with the block, but not included in the blocks
// hash. This allows this data to be different per peer or discarded without
// impacting the blockchain.
type Block struct {
	Version           uint32                     `protobuf:"varint,1,opt,name=version" json:"version,omitempty"`
	Timestamp         *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Transactions      []*InBlockTransaction      `protobuf:"bytes,3,rep,name=transactions" json:"transactions,omitempty"`
	StateHash         []byte                     `protobuf:"bytes,4,opt,name=stateHash,proto3" json:"stateHash,omitempty"`
	TxSetStateHash    []byte                     `protobuf:"bytes,8,opt,name=txSetStateHash,proto3" json:"txSetStateHash,omitempty"`
	PreviousBlockHash []byte                     `protobuf:"bytes,5,opt,name=previousBlockHash,proto3" json:"previousBlockHash,omitempty"`
	ConsensusMetadata []byte                     `protobuf:"bytes,6,opt,name=consensusMetadata,proto3" json:"consensusMetadata,omitempty"`
	NonHashData       *NonHashData               `protobuf:"bytes,7,opt,name=nonHashData" json:"nonHashData,omitempty"`
}

func (m *Block) Reset()                    { *m = Block{} }
func (m *Block) String() string            { return proto.CompactTextString(m) }
func (*Block) ProtoMessage()               {}
func (*Block) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{7} }

func (m *Block) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *Block) GetTransactions() []*InBlockTransaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func (m *Block) GetNonHashData() *NonHashData {
	if m != nil {
		return m.NonHashData
	}
	return nil
}

// Contains information about the blockchain ledger such as height, current
// block hash, and previous block hash.
type BlockchainInfo struct {
	Height            uint64 `protobuf:"varint,1,opt,name=height" json:"height,omitempty"`
	CurrentBlockHash  []byte `protobuf:"bytes,2,opt,name=currentBlockHash,proto3" json:"currentBlockHash,omitempty"`
	PreviousBlockHash []byte `protobuf:"bytes,3,opt,name=previousBlockHash,proto3" json:"previousBlockHash,omitempty"`
}

func (m *BlockchainInfo) Reset()                    { *m = BlockchainInfo{} }
func (m *BlockchainInfo) String() string            { return proto.CompactTextString(m) }
func (*BlockchainInfo) ProtoMessage()               {}
func (*BlockchainInfo) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{8} }

// NonHashData is data that is recorded on the block, but not included in
// the block hash when verifying the blockchain.
// localLedgerCommitTimestamp - The time at which the block was added
// to the ledger on the local peer.
// chaincodeEvent - is an array ChaincodeEvents, one per transaction in the
// block
type NonHashData struct {
	LocalLedgerCommitTimestamp *google_protobuf.Timestamp `protobuf:"bytes,1,opt,name=localLedgerCommitTimestamp" json:"localLedgerCommitTimestamp,omitempty"`
	ChaincodeEvents            []*ChaincodeEvent          `protobuf:"bytes,2,rep,name=chaincodeEvents" json:"chaincodeEvents,omitempty"`
}

func (m *NonHashData) Reset()                    { *m = NonHashData{} }
func (m *NonHashData) String() string            { return proto.CompactTextString(m) }
func (*NonHashData) ProtoMessage()               {}
func (*NonHashData) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{9} }

func (m *NonHashData) GetLocalLedgerCommitTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.LocalLedgerCommitTimestamp
	}
	return nil
}

func (m *NonHashData) GetChaincodeEvents() []*ChaincodeEvent {
	if m != nil {
		return m.ChaincodeEvents
	}
	return nil
}

type PeerAddress struct {
	Host string `protobuf:"bytes,1,opt,name=host" json:"host,omitempty"`
	Port int32  `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *PeerAddress) Reset()                    { *m = PeerAddress{} }
func (m *PeerAddress) String() string            { return proto.CompactTextString(m) }
func (*PeerAddress) ProtoMessage()               {}
func (*PeerAddress) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{10} }

type PeerID struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *PeerID) Reset()                    { *m = PeerID{} }
func (m *PeerID) String() string            { return proto.CompactTextString(m) }
func (*PeerID) ProtoMessage()               {}
func (*PeerID) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{11} }

type PeerEndpoint struct {
	ID      *PeerID           `protobuf:"bytes,1,opt,name=ID,json=iD" json:"ID,omitempty"`
	Address string            `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	Type    PeerEndpoint_Type `protobuf:"varint,3,opt,name=type,enum=protos.PeerEndpoint_Type" json:"type,omitempty"`
	PkiID   []byte            `protobuf:"bytes,4,opt,name=pkiID,proto3" json:"pkiID,omitempty"`
}

func (m *PeerEndpoint) Reset()                    { *m = PeerEndpoint{} }
func (m *PeerEndpoint) String() string            { return proto.CompactTextString(m) }
func (*PeerEndpoint) ProtoMessage()               {}
func (*PeerEndpoint) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{12} }

func (m *PeerEndpoint) GetID() *PeerID {
	if m != nil {
		return m.ID
	}
	return nil
}

type PeersMessage struct {
	Peers []*PeerEndpoint `protobuf:"bytes,1,rep,name=peers" json:"peers,omitempty"`
}

func (m *PeersMessage) Reset()                    { *m = PeersMessage{} }
func (m *PeersMessage) String() string            { return proto.CompactTextString(m) }
func (*PeersMessage) ProtoMessage()               {}
func (*PeersMessage) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{13} }

func (m *PeersMessage) GetPeers() []*PeerEndpoint {
	if m != nil {
		return m.Peers
	}
	return nil
}

type PeersAddresses struct {
	Addresses []string `protobuf:"bytes,1,rep,name=addresses" json:"addresses,omitempty"`
}

func (m *PeersAddresses) Reset()                    { *m = PeersAddresses{} }
func (m *PeersAddresses) String() string            { return proto.CompactTextString(m) }
func (*PeersAddresses) ProtoMessage()               {}
func (*PeersAddresses) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{14} }

type HelloMessage struct {
	PeerEndpoint   *PeerEndpoint   `protobuf:"bytes,1,opt,name=peerEndpoint" json:"peerEndpoint,omitempty"`
	BlockchainInfo *BlockchainInfo `protobuf:"bytes,2,opt,name=blockchainInfo" json:"blockchainInfo,omitempty"`
}

func (m *HelloMessage) Reset()                    { *m = HelloMessage{} }
func (m *HelloMessage) String() string            { return proto.CompactTextString(m) }
func (*HelloMessage) ProtoMessage()               {}
func (*HelloMessage) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{15} }

func (m *HelloMessage) GetPeerEndpoint() *PeerEndpoint {
	if m != nil {
		return m.PeerEndpoint
	}
	return nil
}

func (m *HelloMessage) GetBlockchainInfo() *BlockchainInfo {
	if m != nil {
		return m.BlockchainInfo
	}
	return nil
}

type Message struct {
	Type      Message_Type               `protobuf:"varint,1,opt,name=type,enum=protos.Message_Type" json:"type,omitempty"`
	Timestamp *google_protobuf.Timestamp `protobuf:"bytes,2,opt,name=timestamp" json:"timestamp,omitempty"`
	Payload   []byte                     `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
	Signature []byte                     `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{16} }

func (m *Message) GetTimestamp() *google_protobuf.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

type Response struct {
	Status    Response_StatusCode `protobuf:"varint,1,opt,name=status,enum=protos.Response_StatusCode" json:"status,omitempty"`
	Msg       []byte              `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	InnerResp *Response           `protobuf:"bytes,3,opt,name=innerResp" json:"innerResp,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{17} }

func (m *Response) GetInnerResp() *Response {
	if m != nil {
		return m.InnerResp
	}
	return nil
}

// BlockState is the payload of Message.SYNC_BLOCK_ADDED. When a VP
// commits a new block to the ledger, it will notify its connected NVPs of the
// block and the delta state. The NVP may call the ledger APIs to apply the
// block and the delta state to its ledger if the block's previousBlockHash
// equals to the NVP's current block hash
type BlockState struct {
	Block           *Block `protobuf:"bytes,1,opt,name=block" json:"block,omitempty"`
	StateDelta      []byte `protobuf:"bytes,2,opt,name=stateDelta,proto3" json:"stateDelta,omitempty"`
	TxSetStateDelta []byte `protobuf:"bytes,3,opt,name=txSetStateDelta,proto3" json:"txSetStateDelta,omitempty"`
}

func (m *BlockState) Reset()                    { *m = BlockState{} }
func (m *BlockState) String() string            { return proto.CompactTextString(m) }
func (*BlockState) ProtoMessage()               {}
func (*BlockState) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{18} }

func (m *BlockState) GetBlock() *Block {
	if m != nil {
		return m.Block
	}
	return nil
}

// SyncBlockRange is the payload of Message.SYNC_GET_BLOCKS, where
// start and end indicate the starting and ending blocks inclusively. The order
// in which blocks are returned is defined by the start and end values. For
// example, if start=3 and end=5, the order of blocks will be 3, 4, 5.
// If start=5 and end=3, the order will be 5, 4, 3.
type SyncBlockRange struct {
	CorrelationId uint64 `protobuf:"varint,1,opt,name=correlationId" json:"correlationId,omitempty"`
	Start         uint64 `protobuf:"varint,2,opt,name=start" json:"start,omitempty"`
	End           uint64 `protobuf:"varint,3,opt,name=end" json:"end,omitempty"`
}

func (m *SyncBlockRange) Reset()                    { *m = SyncBlockRange{} }
func (m *SyncBlockRange) String() string            { return proto.CompactTextString(m) }
func (*SyncBlockRange) ProtoMessage()               {}
func (*SyncBlockRange) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{19} }

// SyncBlocks is the payload of Message.SYNC_BLOCKS, where the range
// indicates the blocks responded to the request SYNC_GET_BLOCKS
type SyncBlocks struct {
	Range  *SyncBlockRange `protobuf:"bytes,1,opt,name=range" json:"range,omitempty"`
	Blocks []*Block        `protobuf:"bytes,2,rep,name=blocks" json:"blocks,omitempty"`
}

func (m *SyncBlocks) Reset()                    { *m = SyncBlocks{} }
func (m *SyncBlocks) String() string            { return proto.CompactTextString(m) }
func (*SyncBlocks) ProtoMessage()               {}
func (*SyncBlocks) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{20} }

func (m *SyncBlocks) GetRange() *SyncBlockRange {
	if m != nil {
		return m.Range
	}
	return nil
}

func (m *SyncBlocks) GetBlocks() []*Block {
	if m != nil {
		return m.Blocks
	}
	return nil
}

// SyncSnapshotRequest Payload for the penchainMessage.SYNC_GET_SNAPSHOT message.
type SyncStateSnapshotRequest struct {
	CorrelationId uint64 `protobuf:"varint,1,opt,name=correlationId" json:"correlationId,omitempty"`
}

func (m *SyncStateSnapshotRequest) Reset()                    { *m = SyncStateSnapshotRequest{} }
func (m *SyncStateSnapshotRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncStateSnapshotRequest) ProtoMessage()               {}
func (*SyncStateSnapshotRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{21} }

// SyncStateSnapshot is the payload of Message.SYNC_SNAPSHOT, which is a response
// to penchainMessage.SYNC_GET_SNAPSHOT. It contains the snapshot or a chunk of the
// snapshot on stream, and in which case, the sequence indicate the order
// starting at 0.  The terminating message will have len(delta) == 0.
type SyncStateSnapshot struct {
	Delta       []byte                    `protobuf:"bytes,1,opt,name=delta,proto3" json:"delta,omitempty"`
	TxSetDelta  []byte                    `protobuf:"bytes,5,opt,name=txSetDelta,proto3" json:"txSetDelta,omitempty"`
	Sequence    uint64                    `protobuf:"varint,2,opt,name=sequence" json:"sequence,omitempty"`
	BlockNumber uint64                    `protobuf:"varint,3,opt,name=blockNumber" json:"blockNumber,omitempty"`
	Request     *SyncStateSnapshotRequest `protobuf:"bytes,4,opt,name=request" json:"request,omitempty"`
}

func (m *SyncStateSnapshot) Reset()                    { *m = SyncStateSnapshot{} }
func (m *SyncStateSnapshot) String() string            { return proto.CompactTextString(m) }
func (*SyncStateSnapshot) ProtoMessage()               {}
func (*SyncStateSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{22} }

func (m *SyncStateSnapshot) GetRequest() *SyncStateSnapshotRequest {
	if m != nil {
		return m.Request
	}
	return nil
}

// SyncStateDeltasRequest is the payload of Message.SYNC_GET_STATE.
// blockNumber indicates the block number for the delta which is being
// requested. If no payload is included with SYNC_GET_STATE, it represents
// a request for a snapshot of the current state.
type SyncStateDeltasRequest struct {
	Range *SyncBlockRange `protobuf:"bytes,1,opt,name=range" json:"range,omitempty"`
}

func (m *SyncStateDeltasRequest) Reset()                    { *m = SyncStateDeltasRequest{} }
func (m *SyncStateDeltasRequest) String() string            { return proto.CompactTextString(m) }
func (*SyncStateDeltasRequest) ProtoMessage()               {}
func (*SyncStateDeltasRequest) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{23} }

func (m *SyncStateDeltasRequest) GetRange() *SyncBlockRange {
	if m != nil {
		return m.Range
	}
	return nil
}

// SyncStateDeltas is the payload of the Message.SYNC_STATE in response to
// the Message.SYNC_GET_STATE message.
type SyncStateDeltas struct {
	Range       *SyncBlockRange `protobuf:"bytes,1,opt,name=range" json:"range,omitempty"`
	Deltas      [][]byte        `protobuf:"bytes,2,rep,name=deltas,proto3" json:"deltas,omitempty"`
	TxSetDeltas [][]byte        `protobuf:"bytes,3,rep,name=txSetDeltas,proto3" json:"txSetDeltas,omitempty"`
}

func (m *SyncStateDeltas) Reset()                    { *m = SyncStateDeltas{} }
func (m *SyncStateDeltas) String() string            { return proto.CompactTextString(m) }
func (*SyncStateDeltas) ProtoMessage()               {}
func (*SyncStateDeltas) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{24} }

func (m *SyncStateDeltas) GetRange() *SyncBlockRange {
	if m != nil {
		return m.Range
	}
	return nil
}

func init() {
	proto.RegisterType((*Transaction)(nil), "protos.Transaction")
	proto.RegisterType((*MutantTransaction)(nil), "protos.MutantTransaction")
	proto.RegisterType((*TransactionSet)(nil), "protos.TransactionSet")
	proto.RegisterType((*TxSetStateQuery)(nil), "protos.TxSetStateQuery")
	proto.RegisterType((*InBlockTransaction)(nil), "protos.InBlockTransaction")
	proto.RegisterType((*TransactionBlock)(nil), "protos.TransactionBlock")
	proto.RegisterType((*TransactionResult)(nil), "protos.TransactionResult")
	proto.RegisterType((*Block)(nil), "protos.Block")
	proto.RegisterType((*BlockchainInfo)(nil), "protos.BlockchainInfo")
	proto.RegisterType((*NonHashData)(nil), "protos.NonHashData")
	proto.RegisterType((*PeerAddress)(nil), "protos.PeerAddress")
	proto.RegisterType((*PeerID)(nil), "protos.PeerID")
	proto.RegisterType((*PeerEndpoint)(nil), "protos.PeerEndpoint")
	proto.RegisterType((*PeersMessage)(nil), "protos.PeersMessage")
	proto.RegisterType((*PeersAddresses)(nil), "protos.PeersAddresses")
	proto.RegisterType((*HelloMessage)(nil), "protos.HelloMessage")
	proto.RegisterType((*Message)(nil), "protos.Message")
	proto.RegisterType((*Response)(nil), "protos.Response")
	proto.RegisterType((*BlockState)(nil), "protos.BlockState")
	proto.RegisterType((*SyncBlockRange)(nil), "protos.SyncBlockRange")
	proto.RegisterType((*SyncBlocks)(nil), "protos.SyncBlocks")
	proto.RegisterType((*SyncStateSnapshotRequest)(nil), "protos.SyncStateSnapshotRequest")
	proto.RegisterType((*SyncStateSnapshot)(nil), "protos.SyncStateSnapshot")
	proto.RegisterType((*SyncStateDeltasRequest)(nil), "protos.SyncStateDeltasRequest")
	proto.RegisterType((*SyncStateDeltas)(nil), "protos.SyncStateDeltas")
	proto.RegisterEnum("protos.PeerEndpoint_Type", PeerEndpoint_Type_name, PeerEndpoint_Type_value)
	proto.RegisterEnum("protos.Message_Type", Message_Type_name, Message_Type_value)
	proto.RegisterEnum("protos.Response_StatusCode", Response_StatusCode_name, Response_StatusCode_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Peer service

type PeerClient interface {
	// Accepts a stream of Message during chat session, while receiving
	// other Message (e.g. from other peers).
	Chat(ctx context.Context, opts ...grpc.CallOption) (Peer_ChatClient, error)
	// Process a transaction from a remote source.
	ProcessTransaction(ctx context.Context, in *InBlockTransaction, opts ...grpc.CallOption) (*Response, error)
}

type peerClient struct {
	cc *grpc.ClientConn
}

func NewPeerClient(cc *grpc.ClientConn) PeerClient {
	return &peerClient{cc}
}

func (c *peerClient) Chat(ctx context.Context, opts ...grpc.CallOption) (Peer_ChatClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Peer_serviceDesc.Streams[0], c.cc, "/protos.Peer/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerChatClient{stream}
	return x, nil
}

type Peer_ChatClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type peerChatClient struct {
	grpc.ClientStream
}

func (x *peerChatClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *peerChatClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *peerClient) ProcessTransaction(ctx context.Context, in *InBlockTransaction, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/protos.Peer/ProcessTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Peer service

type PeerServer interface {
	// Accepts a stream of Message during chat session, while receiving
	// other Message (e.g. from other peers).
	Chat(Peer_ChatServer) error
	// Process a transaction from a remote source.
	ProcessTransaction(context.Context, *InBlockTransaction) (*Response, error)
}

func RegisterPeerServer(s *grpc.Server, srv PeerServer) {
	s.RegisterService(&_Peer_serviceDesc, srv)
}

func _Peer_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PeerServer).Chat(&peerChatServer{stream})
}

type Peer_ChatServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type peerChatServer struct {
	grpc.ServerStream
}

func (x *peerChatServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *peerChatServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Peer_ProcessTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InBlockTransaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).ProcessTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Peer/ProcessTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).ProcessTransaction(ctx, req.(*InBlockTransaction))
	}
	return interceptor(ctx, in, info, handler)
}

var _Peer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Peer",
	HandlerType: (*PeerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessTransaction",
			Handler:    _Peer_ProcessTransaction_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Chat",
			Handler:       _Peer_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: fileDescriptor5,
}

func init() { proto.RegisterFile("fabric.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 1658 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x58, 0x4b, 0x6f, 0xdb, 0xce,
	0x11, 0xb7, 0x9e, 0xb6, 0x46, 0xb2, 0x4c, 0x6f, 0xec, 0x44, 0x71, 0x82, 0x34, 0x60, 0x1f, 0x08,
	0xfa, 0x50, 0x0a, 0x07, 0x45, 0x83, 0x1c, 0x8a, 0xc8, 0x12, 0x1d, 0x0b, 0x95, 0x29, 0x77, 0x29,
	0xa7, 0x68, 0x0f, 0x35, 0x68, 0x69, 0x6d, 0x13, 0x91, 0x48, 0x95, 0xa4, 0x02, 0x1b, 0xed, 0xa9,
	0xa7, 0x7e, 0x97, 0x1e, 0x7b, 0xeb, 0xb5, 0x40, 0xdb, 0x4f, 0xd2, 0x6b, 0x51, 0x20, 0x1f, 0xa0,
	0xb3, 0xb3, 0x24, 0x45, 0x52, 0x4a, 0x5a, 0xe7, 0xd0, 0xd3, 0xff, 0x92, 0x70, 0x1e, 0x3b, 0x3b,
	0xfb, 0x9b, 0xa7, 0x0c, 0x8d, 0x2b, 0xfb, 0xd2, 0x77, 0xc6, 0xed, 0xb9, 0xef, 0x85, 0x1e, 0xab,
	0xd2, 0x7f, 0xc1, 0x41, 0xeb, 0x72, 0xea, 0x8d, 0x3f, 0x8c, 0x6f, 0x6c, 0xc7, 0x9d, 0x89, 0x20,
	0xb0, 0xaf, 0x45, 0xa0, 0x34, 0x0e, 0xea, 0x41, 0x68, 0x87, 0x22, 0x22, 0xf6, 0x48, 0x63, 0xec,
	0x4d, 0x84, 0xf8, 0x28, 0xdc, 0x30, 0xe2, 0x7e, 0xeb, 0xda, 0xf3, 0xae, 0xa7, 0xe2, 0x25, 0x51,
	0x97, 0x8b, 0xab, 0x97, 0xa1, 0x83, 0x46, 0x42, 0x7b, 0x36, 0x57, 0x0a, 0xfa, 0x3f, 0x4b, 0x50,
	0x1f, 0xf9, 0xb6, 0x1b, 0xd8, 0xe3, 0xd0, 0xf1, 0x5c, 0xf6, 0x03, 0x28, 0x87, 0x77, 0x73, 0xd1,
	0x2a, 0x3c, 0x2f, 0xbc, 0x68, 0x1e, 0x3e, 0x52, 0x5a, 0x41, 0xbb, 0x1b, 0x1b, 0xef, 0x90, 0x1a,
	0x27, 0x25, 0xf6, 0x1c, 0xea, 0xc9, 0xad, 0xfd, 0x5e, 0xab, 0x88, 0x67, 0x1a, 0x3c, 0xcd, 0x62,
	0x2d, 0xd8, 0x9c, 0xdb, 0x77, 0x53, 0xcf, 0x9e, 0xb4, 0x4a, 0x24, 0x8d, 0x49, 0x76, 0x00, 0x5b,
	0x33, 0x11, 0xda, 0x13, 0x3b, 0xb4, 0x5b, 0x65, 0x12, 0x25, 0x34, 0x63, 0xe8, 0xc4, 0xad, 0x33,
	0x69, 0x55, 0x90, 0x5f, 0xe3, 0xf4, 0xcd, 0x5e, 0x43, 0x2d, 0xf1, 0xbd, 0x55, 0x45, 0x41, 0xfd,
	0xf0, 0xa0, 0xad, 0x5e, 0xd7, 0x8e, 0x5f, 0xd7, 0x1e, 0xc5, 0x1a, 0x7c, 0xa9, 0xcc, 0xce, 0x60,
	0x6f, 0xec, 0xb9, 0x57, 0xce, 0x04, 0x61, 0x71, 0xec, 0xa9, 0x13, 0xde, 0x0d, 0x10, 0xa2, 0x69,
	0x6b, 0x93, 0x9e, 0xf8, 0x34, 0x79, 0xe2, 0x1a, 0x1d, 0xbe, 0xf6, 0x24, 0x3b, 0x86, 0x67, 0x39,
	0xfe, 0x99, 0xb4, 0x31, 0xf6, 0xa6, 0xef, 0x85, 0x1f, 0x20, 0x3e, 0xad, 0x2d, 0xf2, 0xfc, 0xbf,
	0x68, 0xb1, 0x3d, 0xa8, 0xb8, 0x9e, 0x3b, 0x16, 0xad, 0x1a, 0x01, 0xa0, 0x08, 0xa6, 0x43, 0x23,
	0xf4, 0xde, 0xe3, 0x01, 0xc4, 0xc2, 0xf3, 0x83, 0x16, 0x90, 0x30, 0xc3, 0x93, 0x08, 0x8d, 0x85,
	0x1f, 0xb6, 0xea, 0x24, 0xa3, 0x6f, 0xf6, 0x14, 0x6a, 0x81, 0x73, 0xed, 0xda, 0xe1, 0xc2, 0x17,
	0xad, 0x06, 0x09, 0x96, 0x0c, 0xfd, 0x14, 0x76, 0x4f, 0x17, 0xa1, 0xed, 0x86, 0xe9, 0x68, 0x63,
	0x78, 0xc2, 0x5b, 0x4b, 0x84, 0x18, 0xbc, 0x02, 0x79, 0x1c, 0x93, 0xec, 0x19, 0x80, 0xfa, 0x74,
	0x27, 0xe2, 0x96, 0x22, 0x5b, 0xe6, 0x29, 0x8e, 0x3e, 0x85, 0x66, 0xca, 0x10, 0xb2, 0xc9, 0xed,
	0x25, 0x27, 0x40, 0x83, 0x25, 0x72, 0x3b, 0xc5, 0x93, 0x56, 0x27, 0xe2, 0xca, 0x5e, 0x4c, 0xd1,
	0x4a, 0x62, 0x75, 0xc9, 0x61, 0x0f, 0xa1, 0x2a, 0x6e, 0x43, 0xe1, 0xaa, 0x6c, 0xd9, 0xe2, 0x11,
	0xa5, 0x0b, 0xd8, 0x19, 0xc9, 0xbb, 0x2d, 0x99, 0xf0, 0xbf, 0x58, 0x08, 0xff, 0x4e, 0xba, 0x3e,
	0x5a, 0xef, 0x7a, 0x26, 0x53, 0x8a, 0xf7, 0xc8, 0x14, 0xfd, 0xdf, 0x65, 0x60, 0x7d, 0xf7, 0x48,
	0xd6, 0x5b, 0x1a, 0xa5, 0xb7, 0xd0, 0x0c, 0x33, 0x6f, 0xa5, 0x1b, 0xeb, 0x87, 0x0f, 0xe3, 0xd4,
	0xc9, 0x22, 0x71, 0xb2, 0xc1, 0x73, 0xfa, 0xac, 0x0f, 0xbb, 0xb3, 0x3c, 0xf8, 0x91, 0x6b, 0x8f,
	0x63, 0x23, 0x2b, 0xd1, 0x41, 0x3b, 0xab, 0xa7, 0xd8, 0x10, 0xf6, 0x03, 0x09, 0x04, 0xa1, 0x90,
	0x36, 0x57, 0x22, 0x73, 0x49, 0xc5, 0xe6, 0xf0, 0x42, 0x63, 0xeb, 0xcf, 0x7d, 0x53, 0x88, 0xff,
	0xdf, 0x42, 0x3c, 0xda, 0x86, 0x7a, 0x2a, 0x3b, 0x74, 0x0e, 0x5a, 0x2a, 0x1a, 0x94, 0x7b, 0xec,
	0x67, 0x6b, 0x4a, 0x49, 0xa2, 0x1c, 0x01, 0xb4, 0x9a, 0xa2, 0xd9, 0x32, 0xd3, 0xff, 0x5c, 0x80,
	0xdd, 0xb4, 0x54, 0x04, 0x58, 0x5f, 0x49, 0x30, 0x0b, 0xa9, 0x60, 0x62, 0xc1, 0xf9, 0x24, 0x8d,
	0x9a, 0x77, 0x44, 0xc9, 0x27, 0x08, 0xdf, 0xf7, 0xfc, 0x2e, 0xb6, 0x71, 0xca, 0xac, 0x6d, 0xbe,
	0x64, 0x48, 0xb8, 0x88, 0xa0, 0x7c, 0xa9, 0x71, 0x45, 0xa0, 0xd7, 0xcd, 0xa4, 0xf5, 0x1b, 0x72,
	0x06, 0x51, 0xda, 0xa4, 0xca, 0xa4, 0x9b, 0x91, 0xf2, 0x9c, 0xb6, 0xfe, 0xa9, 0x08, 0x15, 0xf5,
	0x7e, 0xac, 0xed, 0x8f, 0x51, 0xfc, 0x0a, 0x74, 0x77, 0x4c, 0x7e, 0x7d, 0x6d, 0xaf, 0x60, 0x5a,
	0xba, 0x1f, 0xa6, 0x14, 0x54, 0x59, 0x4d, 0x27, 0x76, 0x70, 0x13, 0xd5, 0xc9, 0x92, 0xc1, 0xbe,
	0x87, 0x2d, 0x22, 0x29, 0x38, 0x52, 0xd9, 0x22, 0x95, 0x1c, 0x97, 0xfd, 0x10, 0x76, 0xe7, 0xbe,
	0xf8, 0xe8, 0x78, 0x8b, 0x80, 0xee, 0x23, 0xd5, 0x0a, 0xa9, 0xae, 0x0a, 0xa4, 0x36, 0x26, 0x6e,
	0x20, 0xdc, 0x60, 0x11, 0x9c, 0xc6, 0x35, 0x5a, 0x55, 0xda, 0x2b, 0x02, 0xf6, 0x13, 0xa8, 0x63,
	0xde, 0xca, 0x83, 0x3d, 0xa9, 0xb7, 0x49, 0xe8, 0x3c, 0x88, 0x1f, 0x68, 0x2e, 0x45, 0x3c, 0xad,
	0xa7, 0xff, 0xa1, 0x00, 0xcd, 0xa3, 0x64, 0xc5, 0xe8, 0xbb, 0x57, 0x9e, 0xcc, 0x8a, 0x1b, 0xe1,
	0x5c, 0xdf, 0xa8, 0x46, 0x57, 0xe6, 0x11, 0xc5, 0xbe, 0x0f, 0xda, 0x78, 0xe1, 0xfb, 0x18, 0xac,
	0xa5, 0xf3, 0x2a, 0x6f, 0x56, 0xf8, 0xeb, 0x5f, 0x5a, 0xfa, 0xcc, 0x4b, 0xf5, 0x3f, 0x15, 0xa0,
	0x9e, 0xf2, 0x90, 0xfd, 0x1a, 0x0e, 0x50, 0x66, 0x4f, 0x07, 0x62, 0x72, 0x2d, 0x30, 0xe9, 0x66,
	0x33, 0x27, 0x4c, 0xc2, 0x1a, 0xb5, 0xdf, 0x2f, 0x05, 0xfe, 0x0b, 0xa7, 0xb1, 0x9d, 0xef, 0x64,
	0x33, 0x2f, 0xc0, 0x47, 0x94, 0xbe, 0x90, 0xa8, 0x79, 0x75, 0x1d, 0x91, 0x3e, 0x13, 0xc2, 0xef,
	0x4c, 0x26, 0x58, 0x2e, 0xd4, 0x03, 0x6e, 0xbc, 0x20, 0x8c, 0x0b, 0x4b, 0x7e, 0x4b, 0xde, 0xdc,
	0xf3, 0x55, 0x59, 0x55, 0x38, 0x7d, 0xeb, 0x4f, 0xa1, 0x2a, 0x8f, 0xe1, 0x88, 0x42, 0xa9, 0x6b,
	0xcf, 0x44, 0x7c, 0x42, 0x7e, 0xeb, 0x7f, 0x2b, 0x40, 0x43, 0x8a, 0x0d, 0x77, 0x32, 0xf7, 0x1c,
	0x37, 0xc4, 0x61, 0x59, 0x8c, 0x86, 0x5b, 0xfd, 0xb0, 0x19, 0xbb, 0xa6, 0x0c, 0xf0, 0xa2, 0x43,
	0xbb, 0x95, 0xad, 0x3c, 0xa0, 0x5b, 0x70, 0x02, 0x46, 0x24, 0xfb, 0x51, 0xb4, 0xc4, 0x95, 0xa8,
	0xb1, 0x3e, 0x4e, 0x9f, 0x8d, 0xad, 0xb7, 0x47, 0xa8, 0x10, 0xad, 0x71, 0x58, 0xce, 0xf3, 0x0f,
	0x0e, 0xde, 0xa5, 0xd2, 0x5a, 0x11, 0xfa, 0x4f, 0xa1, 0x2c, 0x75, 0xd8, 0x36, 0xd4, 0xce, 0xcd,
	0x9e, 0x71, 0xdc, 0x37, 0x8d, 0x9e, 0xb6, 0x21, 0xc9, 0xf7, 0x9d, 0x41, 0xbf, 0xd7, 0x19, 0x0d,
	0xb9, 0x56, 0x60, 0xbb, 0xb0, 0x6d, 0x0e, 0xcd, 0x8b, 0x25, 0xab, 0xa8, 0xbf, 0x51, 0xef, 0xc0,
	0xc4, 0xa4, 0x6d, 0x15, 0xb3, 0xa6, 0x32, 0x97, 0x74, 0xd4, 0xc6, 0xf6, 0xd6, 0xb9, 0xc3, 0x95,
	0x8a, 0xde, 0x86, 0x26, 0x9d, 0x8d, 0xa0, 0x15, 0x54, 0x77, 0x76, 0x4c, 0x90, 0x85, 0x1a, 0x5f,
	0x32, 0xf4, 0x3f, 0x22, 0x68, 0x27, 0x62, 0x3a, 0xf5, 0xe2, 0xcb, 0x5e, 0x43, 0x63, 0x9e, 0xb2,
	0x1b, 0xc1, 0xb7, 0xfe, 0xce, 0x8c, 0xa6, 0x6c, 0x5f, 0x97, 0x99, 0x32, 0x88, 0xfa, 0x4b, 0x92,
	0x15, 0xd9, 0x22, 0xe1, 0x39, 0x6d, 0xfd, 0x5f, 0x25, 0xd8, 0x8c, 0xbd, 0x78, 0x91, 0xd9, 0xa2,
	0x93, 0xdb, 0x23, 0x71, 0x1a, 0xfb, 0xaf, 0x6f, 0x68, 0x9f, 0x5f, 0xad, 0x33, 0xf3, 0xa7, 0x9c,
	0x5f, 0x04, 0xff, 0x5e, 0x5c, 0x1f, 0xd8, 0x26, 0x40, 0xaf, 0x6f, 0x75, 0x2f, 0x4e, 0x8c, 0xc1,
	0x60, 0x88, 0x91, 0x7d, 0x00, 0x3b, 0x44, 0xcb, 0x7f, 0x86, 0xa6, 0x69, 0x74, 0x47, 0x5a, 0x11,
	0x13, 0xb7, 0x49, 0xcc, 0x77, 0xc6, 0xe8, 0xe2, 0xcc, 0x30, 0xb8, 0xa5, 0x95, 0x92, 0x83, 0x8a,
	0x2e, 0xb3, 0x1d, 0xa8, 0x13, 0x6d, 0x1a, 0xbf, 0x3c, 0xb5, 0xde, 0x69, 0x15, 0xb6, 0x0f, 0xbb,
	0xdd, 0x93, 0x4e, 0xdf, 0xbc, 0x18, 0xf1, 0x8e, 0x69, 0x75, 0xba, 0xa3, 0xfe, 0xd0, 0xd4, 0xaa,
	0xf2, 0x02, 0xeb, 0x57, 0xa6, 0xb2, 0x75, 0x34, 0x18, 0x76, 0x7f, 0x6e, 0x69, 0x75, 0x79, 0x98,
	0x98, 0x11, 0xa3, 0x81, 0xc9, 0xa9, 0x2d, 0x19, 0x17, 0x9d, 0x5e, 0x0f, 0x9d, 0xdd, 0x66, 0x4f,
	0xe0, 0x11, 0x71, 0xad, 0x51, 0x67, 0x64, 0x90, 0x05, 0xcb, 0xec, 0x9c, 0x59, 0x27, 0xc3, 0x91,
	0xd6, 0x64, 0x8f, 0xe0, 0x41, 0x4a, 0x98, 0x08, 0x76, 0xd8, 0x63, 0xd8, 0xcf, 0x9d, 0xea, 0x19,
	0x83, 0x51, 0xc7, 0xd2, 0x34, 0xe9, 0x63, 0x4a, 0x14, 0xb1, 0x77, 0x59, 0x03, 0xb6, 0xb8, 0x61,
	0x9d, 0x0d, 0x4d, 0xcb, 0xd0, 0xf6, 0x24, 0x62, 0x5d, 0xf9, 0x69, 0x5a, 0xe7, 0x96, 0xb6, 0xaf,
	0xff, 0xa5, 0x80, 0x52, 0x11, 0xcc, 0x65, 0x27, 0x66, 0xaf, 0xa0, 0x2a, 0xc7, 0xc1, 0x22, 0x88,
	0x82, 0xfe, 0x24, 0x0e, 0x7a, 0xac, 0xd1, 0xb6, 0x48, 0x2c, 0x07, 0x28, 0x8f, 0x54, 0x99, 0x06,
	0xa5, 0x59, 0x70, 0x1d, 0xf5, 0x50, 0xf9, 0xc9, 0xda, 0x50, 0x73, 0x5c, 0x57, 0xf8, 0xf2, 0x54,
	0xb4, 0xd2, 0x69, 0x79, 0x4b, 0x7c, 0xa9, 0x82, 0x55, 0x0a, 0x4b, 0xbb, 0xf9, 0x90, 0x36, 0x60,
	0xd3, 0x3a, 0xef, 0x76, 0x0d, 0xcb, 0xd2, 0xfe, 0x51, 0x90, 0xd4, 0x71, 0xa7, 0x3f, 0x38, 0xe7,
	0x86, 0xf6, 0xa9, 0xa4, 0xff, 0x0e, 0x80, 0x12, 0x9a, 0x66, 0x13, 0xfb, 0x36, 0x54, 0x28, 0x9d,
	0xa3, 0x7a, 0xd9, 0xce, 0xe4, 0x3c, 0x57, 0x32, 0xb9, 0xbd, 0xd3, 0xc4, 0xeb, 0x89, 0x29, 0xce,
	0x17, 0xe5, 0x74, 0x8a, 0x83, 0x59, 0xbf, 0xb3, 0x1c, 0x77, 0x4a, 0x49, 0x65, 0x66, 0x9e, 0xad,
	0xff, 0x06, 0x9a, 0xd6, 0x9d, 0x3b, 0x56, 0xd6, 0x6d, 0x17, 0x2b, 0xe6, 0x3b, 0xb0, 0x3d, 0xf6,
	0x70, 0x84, 0x4c, 0x6d, 0x39, 0x6e, 0xfb, 0x93, 0x68, 0xf2, 0x64, 0x99, 0xb2, 0x53, 0xe1, 0x7d,
	0x51, 0x5b, 0x2d, 0x73, 0x45, 0x48, 0x14, 0xe3, 0x9f, 0x0c, 0x65, 0x2e, 0x3f, 0x75, 0x1b, 0x51,
	0x89, 0xed, 0x07, 0x38, 0x8a, 0x2a, 0xbe, 0xbc, 0x24, 0xbf, 0xb6, 0x67, 0x5d, 0xe0, 0x4a, 0x89,
	0x7d, 0x17, 0xaa, 0xf4, 0xdc, 0x78, 0x2a, 0xe4, 0xb0, 0x88, 0x84, 0xfa, 0x5b, 0x68, 0xc9, 0xf3,
	0xf4, 0x28, 0xcb, 0xb5, 0xe7, 0xc1, 0x8d, 0x17, 0x72, 0xf1, 0xdb, 0x05, 0x56, 0xe7, 0xff, 0xf6,
	0x18, 0xfd, 0xaf, 0xb8, 0xa5, 0xad, 0x98, 0x90, 0x4f, 0x9c, 0x10, 0x74, 0x05, 0xd5, 0x8c, 0x89,
	0x48, 0x7e, 0x8e, 0x29, 0x54, 0xd5, 0xc2, 0x90, 0xe2, 0xc8, 0x25, 0x3e, 0x90, 0x97, 0xcb, 0x1d,
	0x56, 0x61, 0x93, 0xd0, 0xf2, 0x57, 0x3a, 0xf9, 0x6c, 0x2e, 0x66, 0x97, 0xc2, 0x8f, 0x60, 0x4a,
	0xb3, 0xd8, 0x1b, 0xd8, 0xf4, 0x95, 0xeb, 0xd4, 0x2e, 0xea, 0x87, 0xcf, 0xd3, 0x10, 0xad, 0x7b,
	0x22, 0x8f, 0x0f, 0xe8, 0xc7, 0xf0, 0x30, 0x51, 0x22, 0x5f, 0x82, 0x18, 0x85, 0x7b, 0xc1, 0xae,
	0xdf, 0x61, 0x37, 0xc8, 0xda, 0xb9, 0x67, 0xdc, 0x70, 0x69, 0x21, 0xac, 0x54, 0xdc, 0x70, 0x95,
	0x55, 0x94, 0x7c, 0xfe, 0x12, 0x28, 0xb5, 0xf7, 0x35, 0x78, 0x9a, 0x75, 0xf8, 0x7b, 0x28, 0xcb,
	0xb9, 0x80, 0xb5, 0x57, 0xc6, 0xc9, 0x1f, 0xb2, 0x9d, 0x5c, 0xbf, 0x3e, 0xc8, 0x33, 0xf4, 0x8d,
	0x17, 0x85, 0x1f, 0x17, 0x58, 0x0f, 0x18, 0xfe, 0x90, 0x18, 0x23, 0x2f, 0xf3, 0x7b, 0xea, 0xf3,
	0x2b, 0xe5, 0xc1, 0x4a, 0x29, 0xeb, 0x1b, 0x97, 0xea, 0xef, 0x3c, 0xaf, 0xfe, 0x13, 0x00, 0x00,
	0xff, 0xff, 0xc1, 0x41, 0x5d, 0xf9, 0xfe, 0x11, 0x00, 0x00,
}
